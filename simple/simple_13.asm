;====================================================================
; Main.asm file generated by New Project wizard
; txt coding:	utf-8
;
; Created:   Чт авг 13 2020
; Processor: Attini13
; Compiler:  AVRASM (Proteus)
;====================================================================

;====================================================================
; OBJECTIVES	|	Задачи
;====================================================================

; [+] Настраиваемая частота процессора
; [+] Сон
; [+] Высчитывать время для таймера для частот МК от 37,5 кГц
; [~] Отработать нажатия
;   [+] Решить проблему запуска макросов с "@1" - typo: "ADC" != "ACD"
;   [~] Настроить прерывания по отпусканию кнопки
;   [ ] Изучить поведение СД
; [ ] Таймер (25 мин)
;   []

;====================================================================
; Fuses	|	
;====================================================================

; BODLEVEL[1:0] = 11    ; BOD Disabled

;====================================================================
; DEFINITIONS	|	Определения
;====================================================================

#include "const_13.inc" ;.INCLUDE 
#include "macro_13.inc"


; ____________Настройка_параметров_____________
; ___________________Setup_____________________
freq 375	; *100 Hz
testmode 1 ; 1 = test mode (3s), 0 = prod. mode (25min)

;====================================================================
; VARIABLES	|	Переменные
;====================================================================

.def temp = r16
.def pin = r17

.def act_flags = r18    ; 0 - noiseT
; act_flags's bits:
.equ noiseT = 0
.equ noiseT_release = 1
.equ RedT = 2  ; Зажеч светодиод после отпускания кнопки

;====================================================================
; RESET and INTERRUPT VECTORS	|	Сброс и векторы прерываний
;====================================================================

    rjmp	RESET	    ;	Reset	Handler	
    rjmp	EXT_INT0	;	IRQ0	Handler	
    reti    ;rjmp	PCINT0i	    ;	PCINT0	Handler	
    rjmp	TIM0_OVF	;	Timer0	Overflow	Handler
    reti    ;rjmp	EE_RDY	    ;	EEPROM	Ready	Handler
    reti    ;rjmp	ANA_COMP	;	Analog	Comparator	Handler
    reti    ;rjmp	TIM0_COMPA	;	Timer0	CompareA	Handler
    reti    ;rjmp	TIM0_COMPB	;	Timer0	CompareB	Handler
    reti    ;rjmp	WATCHDOG	;	Watchdog	Interrupt	Handler
    reti    ;rjmp	ADCi        ;	ADC	Conversion	Handler

;====================================================================
; CODE SEGMENT
;====================================================================

EXT_INT0:
    ; set noise timer flag
    set
    bld act_flags, noiseT   ; bit load, бит задержки против шума в рег.флагов
reti

TIM0_OVF:
    ;;
    ;eor temp, pin ;исключающее ИЛИ (OR)
    ;out PORTB, temp 

    ; Отключени СД, Пропустить, если флаг не установлен
    sbrc act_flags, RedT
    cbi pinB, red_pnum
    ;rcall RedLOff

    ; [ ] выполнить, когда пройдет заданное время
    ; read noise timer flag
    ;bst
    ; skip if noiseT flag not set    |  Пропустить, если флаг noiseT не установлен
    sbrc act_flags, noiseT  ; было sbrs, найти все такие ошибки [~]
    rjmp button

reti

RedLOff:
    cbi pinB, red_pnum
    clt
    bld act_flags, RedT
ret

button:
    ; ждать здесь? или call после основной операции [ ] 
    clt
    bld act_flags, noiseT
    ; две ветви действия: нажатие и отпускание
    sbrc act_flags, noiseT_release  ; fix
    rjmp button_release
    rjmp button_press

button_press:
    ; действие
    ; установка другого флага
    ; перевод кнопки на прерывания по спаду/фронту
    set
    bld act_flags, noiseT_release
    tout	MCUCR,	MCUCR_pint0r    ; проверить [~]
reti

button_release:
    clt
    bld act_flags, noiseT_release
    tout	MCUCR,	MCUCR_pint0f    ; проверить [~]

    set
    bld act_flags, RedT ; флаг ожидания для СД
    sbi pinB, red_pnum
reti

reset:  ;_____________________________________________________________
    tout SPL, low(RAMEND)   ; Set Stack Pointer to top of RAM

    ;загрузка в регистр temp "1", смещенной на TOIE0, прерывание по переполнению таймера 0
    tout TIMSK0, (1<<TOIE0)
    ;загрузка двух единиц смещенных на CS00 и CS02 в регистр temp, тактовая частота разделена на 64
    tout TCCR0B, (1<<CS00)|(1<<CS01)|(0<<CS02)
    out TCCR0B, temp 
    ldi pin, (1<<3) ;загрузка в рег 1, смещ на 4 разряда влево
    out DDRB, pin
    ;отключение компаратора:
    tout ACSR, 1<<ACD   ;off

    ; Freq, *move it up
    ; Oscillator Calibration
    ;tout OSCCAL, freq_cal
    ; Clock Prescale
    ;tout CLKPR, 1<<7    ; Clock Prescaler Change Enable
    ;tout CLKPR, 0b1000  ; Clock Division Factor = 256, freq = 37,5kHz
    mcu_freq_div 256
    
    ;sleep
    tout MCUCR, 1 << SE ; Sleep Enable

    ; int0, -> GIFR
    tout	GIMSK,	1 << int0 | 0 << PCIE	; General Interrupt Mask
    tout	MCUCR,  MCUCR_pint0f            ; Прерывание по спаду + сон

    ; button init
    tout PORTB, 1<<1

    ;clr temp 

    sei

loop:
    sleep
    rjmp loop